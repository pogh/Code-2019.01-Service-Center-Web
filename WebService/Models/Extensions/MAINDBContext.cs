using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Company.BusinessObjects.Common;
using Company.WebService.Models.Extensions.WebApplication;

namespace Company.WebService.Models.MAINDB {

	/*
		// Command to create MAINDBContext models (you need to add your username and pasword):
		dotnet ef dbcontext scaffold "Server=SQLTEST;Database=MAINDB;User Id=;Password=" Microsoft.EntityFrameworkCore.SqlServer -f -o "Models/MAINDB" 
			-t dbo.AffiliateArtikelstamm
			-t dbo.AffiliateArtikelstammAlternativPreis
			-t dbo.AffiliateArtikelstammBildvorgabe
			-t dbo.AffiliateArtikelstammPreis
			-t dbo.AffiliateArtikelstammVerfuegbarkeit
			-t dbo.Artikelstamm
			-t dbo.ArtikelstammAttributisierung
			-t dbo.ArtikelstammEinheit
			-t dbo.ArtikelstammFirma
			-t dbo.ArtikelstammIdentifikation
			-t dbo.ArtikelstammMenge
			-t dbo.ArtikelstammName
			-t dbo.ArtikelstammSuchanbieter
			-t dbo.ArtikelstammSuche
			-t dbo.ArtikelstammSucheBegriff
			-t dbo.belege
			-t dbo.einlesen_Artikel
			-t dbo.einlesen_Kopfdaten
			-t dbo.einlesen_Lieferadresse
			-t dbo.einlesen_Rechnungsadresse
			-t dbo.Kunden
			-t dbo.Lieferart
			-t dbo.Liefertabelle
			-t dbo.mwst_table
			-t dbo.SchrammOsaffiliateMapping


		// After you have generated the model: 
		// • Rename 'override void OnModelCreating' to 'OnModelCreatingAutoGenerated' in Models /MAINDB/MAINDBContext
		// • Remove function 'override void OnConfiguring' in Models.MAINDB.MAINDBContext (It has your password)
		// • Delete generated object KundenGruppe.  A field is imported by dotnet ef dbcontext scaffold as just decimal.  It needs to be decimal? (nullable).

		// Command to create ServiceCenterContext models (you need to add your username and pasword):
  		dotnet ef dbcontext scaffold "Server=SQLTEST;Database=MAINDB;User Id=;Password=" Microsoft.EntityFrameworkCore.SqlServer -c "ServiceCenterContext" -f -o "Models/ServiceCenter" 
			-t ServiceCenter.CustomerComment
			-t ServiceCenter.CustomerMapping
			-t ServiceCenter.CustomerWarning
			-t ServiceCenter.DeliveryPaymentButton
			-t ServiceCenter.Invoice
			-t ServiceCenter.InvoiceItem
			-t ServiceCenter.InvoiceDeliveryAddress
			-t ServiceCenter.InvoiceBillingAddress
			-t ServiceCenter.PznAvailabilityTypeOverride
	*/

	public partial class MAINDBContext : DbContext {

		// These are objects used for results of FromSql commands
		public virtual DbSet<Address> Addresses { get; set; }
		public virtual DbSet<Affiliate> Affiliates { get; set; }
		public virtual DbSet<ArticleSearchResult> ArticleSearchResults { get; set; }
		public virtual DbSet<BankInfo> BankInfos { get; set; }
		public virtual DbSet<KundenGruppe> KundenGruppen { get; set; }
		public virtual DbSet<PaymentMatrixRow> PaymentMatrix { get; set; }


		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
			if (!optionsBuilder.IsConfigured) {
				//Make sure to remove connection string in the auto generated context
			}
		}

		protected override void OnModelCreating(ModelBuilder modelBuilder) {

			OnModelCreatingAutoGenerated(modelBuilder);

			modelBuilder.Entity<Affiliate>(entity => {
				entity.ToTable("Affiliate");
				entity.Property(e => e.AffiliateId).HasColumnName("ID");
				entity.Property(e => e.Key).HasColumnName("Schluessel");
			});

			modelBuilder.Entity<ArticleSearchResult>(entity => {
				entity.Property(e => e.IntegerField)
						.HasConversion<decimal>(x => x, y => System.Convert.ToInt32(y));
			});

			modelBuilder.Entity<BankInfo>(entity => {
				entity.HasKey(e => e.BankInfoId);
				entity.Property(e => e.BankInfoId)
						.HasConversion<decimal>(x => x, y => System.Convert.ToInt32(y));
			});

			modelBuilder.Entity<KundenGruppe>(entity => {
				entity.ToTable("Kunden_Gruppe");
				entity.HasKey(e => e.PkkundenGruppeId);
				entity.Property(e => e.PkkundenGruppeId)
						.HasConversion<decimal>(x => x, y => System.Convert.ToInt32(y));

				entity.Property(e => e.PkkundenGruppeId).HasColumnName("PKKunden_Gruppe_ID");
				entity.Property(e => e.KundenGruppeName).HasColumnName("Kunden_Gruppe_Name");
				entity.Property(e => e.KundenGruppeRabatt).HasColumnName("Kunden_Gruppe_Rabatt");
				entity.Property(e => e.KundenGruppeVersand).HasColumnName("Kunden_Gruppe_Versand");
				entity.Property(e => e.KundenGruppePmulti).HasColumnName("Kunden_Gruppe_Pmulti");
				entity.Property(e => e.Navshortcutdimension3).HasColumnName("NAVShortcutdimension3");
			});

			modelBuilder.Entity<PaymentMatrixRow>(entity => {
				entity.HasKey(e => e.RowId);
			});

		}
	}
}
