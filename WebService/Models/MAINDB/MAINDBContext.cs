using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Company.WebService.Models.MAINDB
{
    public partial class MAINDBContext : DbContext
    {
        public MAINDBContext()
        {
        }

        public MAINDBContext(DbContextOptions<MAINDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AffiliateArtikelstamm> AffiliateArtikelstamm { get; set; }
        public virtual DbSet<AffiliateArtikelstammAlternativPreis> AffiliateArtikelstammAlternativPreis { get; set; }
        public virtual DbSet<AffiliateArtikelstammBildvorgabe> AffiliateArtikelstammBildvorgabe { get; set; }
        public virtual DbSet<AffiliateArtikelstammPreis> AffiliateArtikelstammPreis { get; set; }
        public virtual DbSet<AffiliateArtikelstammVerfuegbarkeit> AffiliateArtikelstammVerfuegbarkeit { get; set; }
        public virtual DbSet<Artikelstamm> Artikelstamm { get; set; }
        public virtual DbSet<ArtikelstammAttributisierung> ArtikelstammAttributisierung { get; set; }
        public virtual DbSet<ArtikelstammEinheit> ArtikelstammEinheit { get; set; }
        public virtual DbSet<ArtikelstammFirma> ArtikelstammFirma { get; set; }
        public virtual DbSet<ArtikelstammIdentifikation> ArtikelstammIdentifikation { get; set; }
        public virtual DbSet<ArtikelstammMenge> ArtikelstammMenge { get; set; }
        public virtual DbSet<ArtikelstammName> ArtikelstammName { get; set; }
        public virtual DbSet<ArtikelstammSuchanbieter> ArtikelstammSuchanbieter { get; set; }
        public virtual DbSet<ArtikelstammSuche> ArtikelstammSuche { get; set; }
        public virtual DbSet<ArtikelstammSucheBegriff> ArtikelstammSucheBegriff { get; set; }
        public virtual DbSet<Belege> Belege { get; set; }
        public virtual DbSet<Kunden> Kunden { get; set; }
        public virtual DbSet<Lieferart> Lieferart { get; set; }
        public virtual DbSet<Liefertabelle> Liefertabelle { get; set; }
        public virtual DbSet<MwstTable> MwstTable { get; set; }
        public virtual DbSet<SchrammOsaffiliateMapping> SchrammOsaffiliateMapping { get; set; }

        // Unable to generate entity type for table 'dbo.einlesen_Artikel'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.einlesen_Kopfdaten'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.einlesen_Lieferadresse'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.einlesen_Rechnungsadresse'. Please see the warning messages.

        protected void OnModelCreatingAutoGenerated(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity<AffiliateArtikelstamm>(entity =>
            {
                entity.HasIndex(e => new { e.AffiliateId, e.Artikelnummer })
                    .IsUnique();

                entity.HasIndex(e => new { e.Artikelnummer, e.Gelistet })
                    .HasName("IX_AffiliateArtikelstamm_Gelistet");

                entity.HasIndex(e => new { e.Id, e.Artikelnummer })
                    .HasName("IX_AffiliateArtikelstamm_Artikelnummer");

                entity.HasIndex(e => new { e.Id, e.Artikelnummer, e.Suchbar, e.Rang, e.AffiliateId, e.Gelistet })
                    .HasName("IX_AffiliateArtikelstamm_Gelistet_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");

                entity.Property(e => e.Gelistet)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GruppeId)
                    .HasColumnName("GruppeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Suchbar)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TypId)
                    .HasColumnName("TypID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithMany(p => p.AffiliateArtikelstamm)
                    .HasForeignKey(d => d.Artikelnummer)
                    .HasConstraintName("FK_AffiliateArtikelstamm_Artikelnummer");
            });

            modelBuilder.Entity<AffiliateArtikelstammAlternativPreis>(entity =>
            {
                entity.HasIndex(e => e.SuchanbieterId)
                    .HasName("AffiliateArtikelstammAlternativPreis_SuchanbieterID");

                entity.HasIndex(e => new { e.ArtikelstammId, e.SuchanbieterId })
                    .HasName("AffiliateArtikelstammAlternativPreis_ArtikelstammID")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.ArtikelstammId, e.SuchanbieterId, e.Verkaufspreis, e.Mengenbegrenzung, e.Startdatum, e.Enddatum })
                    .HasName("IX_AffiliateArtikelstammAlternativPreis_Start_Ende");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Aenderungsdatum).HasColumnType("datetime");

                entity.Property(e => e.ArtikelstammId).HasColumnName("ArtikelstammID");

                entity.Property(e => e.Enddatum).HasColumnType("datetime");

                entity.Property(e => e.GriffinUser)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Startdatum).HasColumnType("datetime");

                entity.Property(e => e.SuchanbieterId).HasColumnName("SuchanbieterID");

                entity.Property(e => e.Verkaufspreis).HasColumnType("money");

                entity.HasOne(d => d.Artikelstamm)
                    .WithMany(p => p.AffiliateArtikelstammAlternativPreis)
                    .HasForeignKey(d => d.ArtikelstammId)
                    .HasConstraintName("FK_AffiliateArtikelstammAlternativPreis_AffiliateArtikelstamm");

                entity.HasOne(d => d.Suchanbieter)
                    .WithMany(p => p.AffiliateArtikelstammAlternativPreis)
                    .HasForeignKey(d => d.SuchanbieterId)
                    .HasConstraintName("FK_AffiliateArtikelstammAlternativPreis_ArtikelstammSuchanbieter");
            });

            modelBuilder.Entity<AffiliateArtikelstammBildvorgabe>(entity =>
            {
                entity.HasIndex(e => new { e.Schluessel, e.AffiliateId })
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");

                entity.Property(e => e.Parameter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Rang).HasDefaultValueSql("((1))");

                entity.Property(e => e.Schluessel)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AffiliateArtikelstammPreis>(entity =>
            {
                entity.HasKey(e => e.ArtikelstammId);

                entity.HasIndex(e => new { e.ArtikelstammId, e.WaehrungId })
                    .IsUnique();

                entity.Property(e => e.ArtikelstammId)
                    .HasColumnName("ArtikelstammID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Datum)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Kanalverkaufspreis1).HasColumnType("money");

                entity.Property(e => e.MwstId).HasColumnName("MwstID");

                entity.Property(e => e.Preis).HasColumnType("money");

                entity.Property(e => e.Preisempfehlung).HasColumnType("money");

                entity.Property(e => e.Rabattfaehig)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SperrgrundId).HasColumnName("SperrgrundID");

                entity.Property(e => e.Verkaufspreis).HasColumnType("money");

                entity.Property(e => e.WaehrungId)
                    .HasColumnName("WaehrungID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Artikelstamm)
                    .WithOne(p => p.AffiliateArtikelstammPreis)
                    .HasForeignKey<AffiliateArtikelstammPreis>(d => d.ArtikelstammId)
                    .HasConstraintName("FK_AffiliateArtikelstammPreis_ArtikelstammID");
            });

            modelBuilder.Entity<AffiliateArtikelstammVerfuegbarkeit>(entity =>
            {
                entity.HasKey(e => e.ArtikelstammId);

                entity.Property(e => e.ArtikelstammId)
                    .HasColumnName("ArtikelstammID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Datum).HasColumnType("datetime");

                entity.Property(e => e.Mengenbegrenzung).HasDefaultValueSql("((999))");

                entity.Property(e => e.MengenbegrenzungVerkauf).HasDefaultValueSql("((999))");

                entity.Property(e => e.SperrgrundId).HasColumnName("SperrgrundID");

                entity.HasOne(d => d.Artikelstamm)
                    .WithOne(p => p.AffiliateArtikelstammVerfuegbarkeit)
                    .HasForeignKey<AffiliateArtikelstammVerfuegbarkeit>(d => d.ArtikelstammId)
                    .HasConstraintName("FK_AffiliateArtikelstammVerfuegbarkeit_ArtikelstammID");
            });

            modelBuilder.Entity<Artikelstamm>(entity =>
            {
                entity.HasKey(e => e.Artikelnummer);

                entity.HasIndex(e => e.Aktiv);

                entity.HasIndex(e => e.AnbieterFirmaId);

                entity.HasIndex(e => e.HerstellerFirmaId);

                entity.HasIndex(e => e.TypId);

                entity.HasIndex(e => e.WarengruppeId);

                entity.Property(e => e.Artikelnummer).ValueGeneratedNever();

                entity.Property(e => e.Aktiv)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AnbieterFirmaId)
                    .HasColumnName("AnbieterFirmaID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DarreichungId).HasColumnName("DarreichungID");

                entity.Property(e => e.GruppeId)
                    .HasColumnName("GruppeID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HerstellerFirmaId).HasColumnName("HerstellerFirmaID");

                entity.Property(e => e.TypId)
                    .HasColumnName("TypID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WarengruppeId).HasColumnName("WarengruppeID");

                entity.HasOne(d => d.AnbieterFirma)
                    .WithMany(p => p.ArtikelstammAnbieterFirma)
                    .HasForeignKey(d => d.AnbieterFirmaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Artikelstamm_AnbieterFirmaID");

                entity.HasOne(d => d.HerstellerFirma)
                    .WithMany(p => p.ArtikelstammHerstellerFirma)
                    .HasForeignKey(d => d.HerstellerFirmaId)
                    .HasConstraintName("FK_Artikelstamm_HerstellerFirmaID");
            });

            modelBuilder.Entity<ArtikelstammAttributisierung>(entity =>
            {
                entity.HasIndex(e => new { e.Artikelnummer, e.AttributId })
                    .IsUnique();

                entity.HasIndex(e => new { e.Artikelnummer, e.Wert, e.AttributId })
                    .HasName("Mario_texteditor_Abfrage");

                entity.HasIndex(e => new { e.AttributId, e.Artikelnummer, e.Wert })
                    .HasName("NonClusteredIndex-20140411-110200");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributId).HasColumnName("AttributID");

                entity.Property(e => e.Wert)
                    .IsRequired()
                    .HasColumnType("sql_variant");

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithMany(p => p.ArtikelstammAttributisierung)
                    .HasForeignKey(d => d.Artikelnummer)
                    .HasConstraintName("FK_ArtikelstammAttributisierung_Artikelnummer");
            });

            modelBuilder.Entity<ArtikelstammEinheit>(entity =>
            {
                entity.HasIndex(e => e.Bezug);

                entity.HasIndex(e => e.Gruppierung);

                entity.HasIndex(e => e.Schluessel)
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Schluessel)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArtikelstammFirma>(entity =>
            {
                entity.HasIndex(e => e.Hersteller);

                entity.HasIndex(e => e.Name);

                entity.HasIndex(e => e.Schluessel);

                entity.HasIndex(e => e.Virtuell);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alternativname)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Anbieter)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hausnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Hersteller)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Logo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ort)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Plz)
                    .HasColumnName("PLZ")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Schluessel)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sortiername)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Strasse)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArtikelstammIdentifikation>(entity =>
            {
                entity.HasKey(e => e.Artikelnummer);

                entity.HasIndex(e => e.Gtin);

                entity.HasIndex(e => e.Isbn);

                entity.HasIndex(e => e.Pzn);

                entity.HasIndex(e => new { e.Artikelnummer, e.Pzn })
                    .HasName("NonClusteredIndex-20180222-153029")
                    .IsUnique();

                entity.Property(e => e.Artikelnummer).ValueGeneratedNever();

                entity.Property(e => e.Gtin)
                    .HasColumnName("GTIN")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Isbn)
                    .HasColumnName("ISBN")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.KennzeichnungId).HasColumnName("KennzeichnungID");

                entity.Property(e => e.LandId).HasColumnName("LandID");

                entity.Property(e => e.Lsin)
                    .HasColumnName("LSIN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Parameter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pzn).HasColumnName("PZN");

                entity.Property(e => e.Sku)
                    .HasColumnName("SKU")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithOne(p => p.ArtikelstammIdentifikation)
                    .HasForeignKey<ArtikelstammIdentifikation>(d => d.Artikelnummer)
                    .HasConstraintName("FK_ArtikelstammIdentifikation_Artikelnummer");
            });

            modelBuilder.Entity<ArtikelstammMenge>(entity =>
            {
                entity.HasKey(e => e.Artikelnummer)
                    .HasName("PK_ArtikelstammMengenangabe");

                entity.HasIndex(e => e.EinheitId);

                entity.Property(e => e.Artikelnummer).ValueGeneratedNever();

                entity.Property(e => e.EinheitId)
                    .HasColumnName("EinheitID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mengenangabe)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithOne(p => p.ArtikelstammMenge)
                    .HasForeignKey<ArtikelstammMenge>(d => d.Artikelnummer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArtikelstammMenge_Artikelnummer");

                entity.HasOne(d => d.Einheit)
                    .WithMany(p => p.ArtikelstammMenge)
                    .HasForeignKey(d => d.EinheitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArtikelstammMenge_EinheitID");
            });

            modelBuilder.Entity<ArtikelstammName>(entity =>
            {
                entity.HasIndex(e => e.Anzeigename);

                entity.HasIndex(e => e.Artikelname);

                entity.HasIndex(e => new { e.Artikelnummer, e.SpracheId })
                    .IsUnique();

                entity.HasIndex(e => new { e.Artikelnummer, e.Artikelname, e.SpracheId })
                    .HasName("IX_ArtikelstammName_SpracheID");

                entity.HasIndex(e => new { e.Artikelnummer, e.SpracheId, e.Anzeigename })
                    .HasName("IX_ArtikelstammName_ArtikelnummerSpracheAnzeige");

                entity.HasIndex(e => new { e.Artikelnummer, e.Artikelname, e.Anzeigename, e.SpracheId })
                    .HasName("NonClusteredIndex-20161004-110423");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Anzeigename)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Artikelname)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AutorModifyBy).HasMaxLength(100);

                entity.Property(e => e.AutorModifyDate).HasColumnType("datetime");

                entity.Property(e => e.Kurzname)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Sortiername)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.SpracheId)
                    .HasColumnName("SpracheID")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithMany(p => p.ArtikelstammName)
                    .HasForeignKey(d => d.Artikelnummer)
                    .HasConstraintName("FK_ArtikelstammName_Artikelnummer");
            });

            modelBuilder.Entity<ArtikelstammSuchanbieter>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcParameter)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArtikelstammSuche>(entity =>
            {
                entity.HasIndex(e => e.AnbieterFirma);

                entity.HasIndex(e => e.Darreichung);

                entity.HasIndex(e => e.Einheit);

                entity.HasIndex(e => e.HerstellerFirma);

                entity.HasIndex(e => e.Mengenangabe);

                entity.HasIndex(e => e.Name);

                entity.HasIndex(e => e.Schluessel);

                entity.HasIndex(e => e.Warengruppe);

                entity.HasIndex(e => new { e.Artikelnummer, e.SpracheId })
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AnbieterFirma)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Darreichung)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Einheit)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.HerstellerFirma)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Mengenangabe)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Schluessel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpracheId).HasColumnName("SpracheID");

                entity.Property(e => e.Warengruppe)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.HasOne(d => d.ArtikelnummerNavigation)
                    .WithMany(p => p.ArtikelstammSuche)
                    .HasForeignKey(d => d.Artikelnummer)
                    .HasConstraintName("FK_ArtikelstammSuche_Artikelnummer");
            });

            modelBuilder.Entity<ArtikelstammSucheBegriff>(entity =>
            {
                entity.HasIndex(e => new { e.SucheId, e.Wert })
                    .HasName("IX_ArtikelstammSucheBegriff_Wert");

                entity.HasIndex(e => new { e.SucheId, e.BegrifftypId, e.Wert, e.Rang })
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BegrifftypId).HasColumnName("BegrifftypID");

                entity.Property(e => e.Rang).HasDefaultValueSql("((1))");

                entity.Property(e => e.SucheId).HasColumnName("SucheID");

                entity.Property(e => e.Wert)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Suche)
                    .WithMany(p => p.ArtikelstammSucheBegriff)
                    .HasForeignKey(d => d.SucheId)
                    .HasConstraintName("FK_ArtikelstammSucheBegriff_SucheID");
            });

            modelBuilder.Entity<Belege>(entity =>
            {
                entity.HasKey(e => e.PkbelegId);

                entity.ToTable("belege");

                entity.HasIndex(e => e.Ausgebucht)
                    .HasName("_dta_index_belege_7_975705853__K19");

                entity.HasIndex(e => e.BelegDatum);

                entity.HasIndex(e => e.FkbelegTyp)
                    .HasName("_dta_index_belege_9_632441377__K2");

                entity.HasIndex(e => e.FkordCusId);

                entity.HasIndex(e => e.Lieferart)
                    .HasName("_dta_index_belege_9_624721278__K33");

                entity.HasIndex(e => e.OrdOrderId)
                    .HasName("NeukundenIndex1");

                entity.HasIndex(e => e.OrdTimestamp)
                    .HasName("_dta_index_belege_7_975705853__K9");

                entity.HasIndex(e => e.PkbelegId)
                    .HasName("_dta_index_belege_7_975705853__K1");

                entity.HasIndex(e => new { e.Absatzkanal, e.BelegDatum })
                    .HasName("BelegeAbsatzkanalIndex1");

                entity.HasIndex(e => new { e.BetrügerOk, e.PkbelegId })
                    .HasName("_dta_index_belege_9_632441377__K40_K1");

                entity.HasIndex(e => new { e.FkordCudId, e.BelegDatum })
                    .HasName("TempMarketing");

                entity.HasIndex(e => new { e.Gesendet, e.PkbelegId })
                    .HasName("_dta_index_belege_7_975705853__K1_20");

                entity.HasIndex(e => new { e.PkbelegId, e.Gesendet })
                    .HasName("IX_belege_gesendet")
                    .HasFilter("([gesendet] IS NULL)");

                entity.HasIndex(e => new { e.PkbelegId, e.IaChecked })
                    .HasName("NonClusteredIndex-20161004-105739");

                entity.HasIndex(e => new { e.PkbelegId, e.NettoRechnung })
                    .HasName("Netto_Rechnung_Normal");

                entity.HasIndex(e => new { e.PkbelegId, e.ShopPk })
                    .HasName("shop_pk");

                entity.HasIndex(e => new { e.ShopPk, e.Absatzkanal })
                    .HasName("Belege_Absatzkanal");

                entity.HasIndex(e => new { e.ShopPk, e.AffiliatePartnerId })
                    .HasName("BelegeShopPK_AffiliatePartnerID");

                entity.HasIndex(e => new { e.BelegNr, e.PkordId, e.PkbelegId })
                    .HasName("_dta_index_belege_9_624721278__K3_K4_K1");

                entity.HasIndex(e => new { e.PkbelegId, e.Absatzkanal, e.BelegDatum })
                    .HasName("Nicole_Anzahl_Artikel_Umsatz_Index");

                entity.HasIndex(e => new { e.PkbelegId, e.FkbelegTyp, e.BelegDatum })
                    .HasName("Index_Belege_Datum");

                entity.HasIndex(e => new { e.PkbelegId, e.FkordCusId, e.BelegDatum })
                    .HasName("SchufaAuswertung");

                entity.HasIndex(e => new { e.PkbelegId, e.FkbelegTyp, e.AffiliatePartnerId, e.BelegDatum })
                    .HasName("Index_Belege_Partner_Datum");

                entity.HasIndex(e => new { e.BelegDatum, e.FkordCusId, e.PkbelegId, e.FkbelegTyp, e.FkordDvtId })
                    .HasName("_dta_index_belege_9_624721278__K6_K1_K2_K8_10");

                entity.HasIndex(e => new { e.PkbelegId, e.BelegNr, e.FkordCusId, e.Absatzkanal, e.OrdTimestamp })
                    .HasName("TopSeller_Absatzkanal");

                entity.HasIndex(e => new { e.PkbelegId, e.PkordId, e.OrdOrderId, e.BelegDatum, e.FkbelegTyp })
                    .HasName("Auswertung_BelegTyp");

                entity.HasIndex(e => new { e.BelegNr, e.FkordCusId, e.PkbelegId, e.FkbelegTyp, e.FkordDvtId, e.BelegDatum })
                    .HasName("_dta_index_belege_9_624721278__K6_K1_K2_K8_K10_3");

                entity.HasIndex(e => new { e.OrdOrderId, e.FkordDvtId, e.FkbelegTyp, e.PkordId, e.FkordCusId, e.PkbelegId })
                    .HasName("_dta_index_belege_9_624721278__K8_K2_K4_K6_K1_5");

                entity.HasIndex(e => new { e.PkbelegId, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt })
                    .HasName("_dta_index_belege_7_975705853__K1_K2_K8_K19_K9_K32");

                entity.HasIndex(e => new { e.PkbelegId, e.FkordCusId, e.BelegDatum, e.AffiliatePartnerId, e.Absatzkanal, e.FkbelegTyp })
                    .HasName("Index_GriffinStatistik_erzeugen1");

                entity.HasIndex(e => new { e.PkbelegId, e.OrdOrderId, e.ShopPk, e.AffiliatePartnerId, e.AffiliateBestellId, e.ChannelAdvisorId })
                    .HasName("Shop_Status_Update");

                entity.HasIndex(e => new { e.PkbelegId, e.PkordId, e.BelegDatum, e.Absatzkanal, e.Laenderschluessel, e.FkbelegTyp })
                    .HasName("Auswertung_Laenderschluessel_Absatzkanal");

                entity.HasIndex(e => new { e.BelegDatum, e.BelegNr, e.FkordCusId, e.FkbelegTyp, e.FkordDvtId, e.Geschäftskunde, e.NettoRechnung })
                    .HasName("OPListenIndex1");

                entity.HasIndex(e => new { e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K2_K8_K19_K9_K32_K1_K6");

                entity.HasIndex(e => new { e.FkordCusId, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt, e.PkbelegId })
                    .HasName("_dta_index_belege_7_975705853__K6_K2_K8_K19_K9_K32_K1");

                entity.HasIndex(e => new { e.PkbelegId, e.AffiliatePartnerId, e.NettoRechnung, e.Laenderschluessel, e.Absatzkanal, e.FkbelegTyp, e.BelegDatum })
                    .HasName("Belege_Absatzkanal_FKbeleg_typ_beleg_datum");

                entity.HasIndex(e => new { e.PkbelegId, e.FkbelegTyp, e.FkordCusId, e.AffiliatePartnerId, e.Mandatsreferenz, e.FkordDvtId, e.BelegDatum })
                    .HasName("SepaMandatsIndex1");

                entity.HasIndex(e => new { e.BelegNr, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.FkordDvtId, e.Ausgebucht, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K2_K32_K9_K8_K19_K1_K6_3");

                entity.HasIndex(e => new { e.BelegNr, e.FkordCusId, e.PkbelegId, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt })
                    .HasName("_dta_index_belege_7_975705853__K1_K2_K8_K19_K9_K32_3_6");

                entity.HasIndex(e => new { e.BelegNr, e.PkbelegId, e.FkordCusId, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.FkordDvtId, e.Ausgebucht })
                    .HasName("_dta_index_belege_7_975705853__K1_K6_K2_K32_K9_K8_K19_3");

                entity.HasIndex(e => new { e.BelegNr, e.FkordCusId, e.Gesendet, e.PkbelegId, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt })
                    .HasName("_dta_index_belege_7_975705853__K1_K2_K8_K19_K9_K32_3_6_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.Ausgebucht, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.FkordDvtId, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K19_K2_K32_K9_K8_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K2_K8_K19_K9_K32_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.FkordDvtId, e.Ausgebucht, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K2_K32_K9_K8_K19_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.FkordDvtId, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.Ausgebucht, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K8_K2_K32_K9_K19_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.Gesperrt, e.FkbelegTyp, e.OrdTimestamp, e.FkordDvtId, e.Ausgebucht, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K32_K2_K9_K8_K19_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.OrdTimestamp, e.FkbelegTyp, e.Gesperrt, e.FkordDvtId, e.Ausgebucht, e.PkbelegId, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K9_K2_K32_K8_K19_K1_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.PkbelegId, e.FkbelegTyp, e.FkordDvtId, e.Ausgebucht, e.OrdTimestamp, e.Gesperrt, e.FkordCusId })
                    .HasName("_dta_index_belege_7_975705853__K1_K2_K8_K19_K9_K32_K6_3_20");

                entity.HasIndex(e => new { e.BelegNr, e.Gesendet, e.PkbelegId, e.FkordCusId, e.FkbelegTyp, e.Gesperrt, e.OrdTimestamp, e.FkordDvtId, e.Ausgebucht })
                    .HasName("_dta_index_belege_7_975705853__K1_K6_K2_K32_K9_K8_K19_3_20");

                entity.HasIndex(e => new { e.PkbelegId, e.FkbelegTyp, e.OrdOrderId, e.FkordCusId, e.ShopPk, e.AffiliatePartnerId, e.NettoRechnung, e.Absatzkanal, e.PsmId, e.OrdTimestamp })
                    .HasName("Belege_ord_timestamp_PSM");

                entity.HasIndex(e => new { e.PkbelegId, e.BelegNr, e.FkordCusId, e.FkordDvtId, e.OrdTimestamp, e.BelegDatum, e.Ausgebucht, e.Lieferart, e.AffiliatePartnerId, e.Wunschtag, e.Abendtermin, e.HangoverDate, e.FkbelegTyp, e.Gesperrt })
                    .HasName("IX_belege_Statistik");

                entity.Property(e => e.PkbelegId)
                    .HasColumnName("PKbeleg_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Abendtermin).HasColumnType("date");

                entity.Property(e => e.Absatzkanal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Affiliate).HasColumnName("affiliate");

                entity.Property(e => e.AffiliateBestellId)
                    .HasColumnName("affiliateBestellID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AffiliatePartnerId)
                    .HasColumnName("affiliatePartnerID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.ApothekerInfo)
                    .HasColumnName("apotheker_info")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ausgebucht)
                    .HasColumnName("ausgebucht")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BelegDatum)
                    .HasColumnName("beleg_datum")
                    .HasColumnType("datetime");

                entity.Property(e => e.BelegNr)
                    .HasColumnName("beleg_nr")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.BeratungAngeboten).HasColumnName("Beratung_angeboten");

                entity.Property(e => e.BetrügerOk).HasColumnName("Betrüger_OK");

                entity.Property(e => e.Bic)
                    .HasColumnName("BIC")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.BxMobilenumber)
                    .HasColumnName("bx_mobilenumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BxTimeslotId).HasColumnName("bx_timeslot_id");

                entity.Property(e => e.CallcenterInfo)
                    .HasColumnName("callcenter_info")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChannelAdvisorId)
                    .HasColumnName("ChannelAdvisorID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Db1Wert)
                    .HasColumnName("DB1_wert")
                    .HasColumnType("numeric(15, 2)");

                entity.Property(e => e.DhlexpressSamstag).HasColumnName("DHLExpressSamstag");

                entity.Property(e => e.DoppelbestellungOk).HasColumnName("Doppelbestellung_OK");

                entity.Property(e => e.Eigenhändig).HasColumnName("eigenhändig");

                entity.Property(e => e.EkWert)
                    .HasColumnName("EK_wert")
                    .HasColumnType("numeric(15, 2)");

                entity.Property(e => e.Express).HasColumnType("numeric(1, 0)");

                entity.Property(e => e.FkbelegTyp)
                    .HasColumnName("FKbeleg_typ")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.FkordCudId)
                    .HasColumnName("FKord_cud_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.FkordCusId)
                    .HasColumnName("FKord_cus_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.FkordDvtId)
                    .HasColumnName("FKord_dvt_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.FkordOstId)
                    .HasColumnName("FKord_ost_id")
                    .HasColumnType("numeric(10, 0)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Gesendet)
                    .HasColumnName("gesendet")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.Gesperrt)
                    .HasColumnName("gesperrt")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.GhSend)
                    .HasColumnName("GH_send")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.Grundrabatt).HasColumnType("numeric(15, 2)");

                entity.Property(e => e.HangoverDate).HasColumnType("date");

                entity.Property(e => e.IaChecked)
                    .HasColumnName("ia_checked")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.Iban)
                    .HasColumnName("IBAN")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.LexwareExport)
                    .HasColumnName("Lexware_export")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.Lieferart)
                    .HasColumnType("numeric(2, 0)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mandatdatum).HasColumnType("datetime");

                entity.Property(e => e.Mandatsreferenz)
                    .HasMaxLength(34)
                    .IsUnicode(false);

                entity.Property(e => e.MehrfachbestellungOk).HasColumnName("Mehrfachbestellung_OK");

                entity.Property(e => e.NavÜbergabe).HasColumnName("NAV_Übergabe");

                entity.Property(e => e.NettoRechnung).HasColumnName("Netto_Rechnung");

                entity.Property(e => e.OptPrio).HasColumnName("opt_prio");

                entity.Property(e => e.OrdAccountBlz)
                    .HasColumnName("ord_account_blz")
                    .HasColumnType("numeric(8, 0)");

                entity.Property(e => e.OrdAccountKtonr)
                    .HasColumnName("ord_account_ktonr")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.OrdAccountOwner)
                    .HasColumnName("ord_account_owner")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrdExported)
                    .HasColumnName("ord_exported")
                    .HasColumnType("numeric(10, 0)")
                    .HasDefaultValueSql("((99))");

                entity.Property(e => e.OrdExportedAt)
                    .HasColumnName("ord_exported_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdOrderId)
                    .HasColumnName("ord_orderID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrdTimestamp)
                    .HasColumnName("ord_timestamp")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrdTrackingNr)
                    .HasColumnName("ord_tracking_nr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PkordId)
                    .HasColumnName("PKord_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.PsmId)
                    .HasColumnName("PSM_ID")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SchufaOk).HasColumnName("Schufa_OK");

                entity.Property(e => e.SendGhWanne)
                    .HasColumnName("send_GH_Wanne")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.SendLagerWanne)
                    .HasColumnName("send_Lager_Wanne")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.ShopPk).HasColumnName("Shop_PK");

                entity.Property(e => e.StatusExtern)
                    .HasColumnName("status_extern")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StatusIntern)
                    .HasColumnName("status_intern")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Versandkostenfrei).HasDefaultValueSql("((0))");

                entity.Property(e => e.VkWert)
                    .HasColumnName("VK_wert")
                    .HasColumnType("numeric(15, 2)");

                entity.Property(e => e.Wunschtag).HasColumnType("date");
            });

            modelBuilder.Entity<Kunden>(entity =>
            {
                entity.HasKey(e => e.PkkundenId);

                entity.HasIndex(e => e.KundenGruppe)
                    .HasName("_dta_index_Kunden_9_315200223__K32");

                entity.HasIndex(e => e.PkkundenId)
                    .HasName("_dta_index_Kunden_9_1426104121__K1_9987");

                entity.HasIndex(e => new { e.KundenGruppe, e.PkkundenId })
                    .HasName("_dta_index_Kunden_7_315200223__K32_K1");

                entity.HasIndex(e => new { e.PkkundenId, e.FkcusCstId })
                    .HasName("_dta_index_Kunden_9_315200223__K1_K20");

                entity.HasIndex(e => new { e.PkkundenId, e.PtkundenId })
                    .HasName("NonClusteredIndex-20161004-113331");

                entity.HasIndex(e => new { e.PkkundenId, e.AffiliatePartnerId, e.AffiliateKundenId })
                    .HasName("NonClusteredIndex-20161004-110519");

                entity.HasIndex(e => new { e.PkkundenId, e.CusEbaynick, e.CusMail })
                    .HasName("AmazonKundenSucheIndex");

                entity.HasIndex(e => new { e.PkkundenId, e.CusStreet, e.CusZip, e.CusCity })
                    .HasName("DoppelbestellungKunden");

                entity.HasIndex(e => new { e.FkcusGenId, e.CusZip, e.CusCity, e.PkkundenId, e.KundenGruppe })
                    .HasName("_dta_index_Kunden_7_1426104121__K1_K32_8_13_14");

                entity.HasIndex(e => new { e.PkkundenId, e.CusBirth, e.FkcusGenId, e.CusZip, e.AffiliatePartnerId, e.KundenGruppe })
                    .HasName("Nicole_Index");

                entity.HasIndex(e => new { e.PkkundenId, e.KundenNr, e.CusZip, e.CusCity, e.CusMail, e.Name1, e.Name2, e.Affiliate, e.AffiliatePartnerId })
                    .HasName("JokerSucheIndex1");

                entity.HasIndex(e => new { e.PkkundenId, e.KundenNr, e.CusPasswd, e.CusNewpasswd, e.CusBirth, e.CusEbaynick, e.FkcusGenId, e.CusFirstname, e.CusSurname, e.CusFirm, e.CusStreet, e.CusZip, e.CusCity, e.FkcusCucId, e.CusFon, e.CusMobil, e.CusFax, e.CusMail, e.FkcusCstId, e.CusIsWholesaler, e.CusIsAdmin, e.CusSince, e.CusTmp, e.CusTmpLoginstamp, e.CusBonusAccount, e.CusMAINDBDollar, e.CusPayback, e.Name1, e.Name2, e.Name3, e.KundenGruppe, e.FkcusId })
                    .HasName("_dta_index_Kunden_9_1426104121__K3_1_2_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32");

                entity.Property(e => e.PkkundenId)
                    .HasColumnName("PKkunden_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Affiliate).HasColumnName("affiliate");

                entity.Property(e => e.AffiliateKundenId)
                    .HasColumnName("affiliateKundenID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AffiliatePartnerId)
                    .HasColumnName("affiliatePartnerID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.CusMAINDBDollar)
                    .HasColumnName("cus_MAINDB_dollar")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.CusBirth)
                    .HasColumnName("cus_birth")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CusBonusAccount)
                    .HasColumnName("cus_bonus_account")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CusCity)
                    .HasColumnName("cus_city")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusEbaynick)
                    .HasColumnName("cus_ebaynick")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusFax)
                    .HasColumnName("cus_fax")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CusFirm)
                    .HasColumnName("cus_firm")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusFirstname)
                    .HasColumnName("cus_firstname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CusFon)
                    .HasColumnName("cus_fon")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CusIsAdmin)
                    .HasColumnName("cus_is_admin")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.CusIsWholesaler)
                    .HasColumnName("cus_is_wholesaler")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.CusMail)
                    .HasColumnName("cus_mail")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CusMobil)
                    .HasColumnName("cus_mobil")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusNewpasswd)
                    .HasColumnName("cus_newpasswd")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CusPasswd)
                    .HasColumnName("cus_passwd")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CusPayback)
                    .HasColumnName("cus_payback")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CusSince)
                    .HasColumnName("cus_since")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CusStreet)
                    .HasColumnName("cus_street")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusSurname)
                    .HasColumnName("cus_surname")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusTmp)
                    .HasColumnName("cus_tmp")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CusTmpLoginstamp)
                    .HasColumnName("cus_tmp_loginstamp")
                    .HasColumnType("numeric(20, 0)");

                entity.Property(e => e.CusZip)
                    .HasColumnName("cus_zip")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcusCstId)
                    .HasColumnName("FKcus_cst_id")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.FkcusCucId)
                    .HasColumnName("FKcus_cuc_id")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.FkcusGenId)
                    .HasColumnName("FKcus_gen_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcusId)
                    .HasColumnName("FKcus_id")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Gesperrt).HasColumnName("gesperrt");

                entity.Property(e => e.Grundrabatt).HasColumnType("numeric(15, 2)");

                entity.Property(e => e.KundenGruppe)
                    .HasColumnName("Kunden_Gruppe")
                    .HasColumnType("numeric(5, 0)");

                entity.Property(e => e.KundenNr)
                    .IsRequired()
                    .HasColumnName("kunden_nr")
                    .HasMaxLength(9)
                    .HasDefaultValueSql("(N'0000000-K')");

                entity.Property(e => e.Name1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NettoRechnung).HasColumnName("Netto_Rechnung");

                entity.Property(e => e.OutboundCallId)
                    .HasColumnName("OutboundCallID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PtkundenId).HasColumnName("PTKundenID");
            });

            modelBuilder.Entity<Lieferart>(entity =>
            {
                entity.HasKey(e => e.PklieferartId);

                entity.Property(e => e.PklieferartId)
                    .HasColumnName("PKLieferart_ID")
                    .HasColumnType("numeric(5, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Aktiv)
                    .IsRequired()
                    .HasColumnName("aktiv")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EndUhrzeit).HasDefaultValueSql("('20:00:00')");

                entity.Property(e => e.Land)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LandEasylog)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LieferartSprachwert)
                    .IsRequired()
                    .HasColumnName("Lieferart_Sprachwert")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Länderkürzel)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPrioFaktor)
                    .HasColumnType("numeric(4, 2)")
                    .HasDefaultValueSql("((0.5))");

                entity.Property(e => e.Prioritaet).HasDefaultValueSql("((99))");

                entity.Property(e => e.Versandkostengrenze).HasColumnType("numeric(15, 2)");
            });

            modelBuilder.Entity<Liefertabelle>(entity =>
            {
                entity.HasKey(e => e.PkliefertabelleId);

                entity.HasIndex(e => e.PkbelegId)
                    .HasName("NonClusteredIndex-20161004-104101");

                entity.HasIndex(e => e.PkcudId)
                    .HasName("IX_Liefertabelle");

                entity.Property(e => e.PkliefertabelleId)
                    .HasColumnName("PKLiefertabelle_ID")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Anrede)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gesperrt).HasColumnName("gesperrt");

                entity.Property(e => e.Länderkürzel)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ort)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PkbelegId)
                    .HasColumnName("PKbeleg_id")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PkcudId)
                    .HasColumnName("PKcud_id")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Plz)
                    .IsRequired()
                    .HasColumnName("plz")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sperrbeschreibung).IsUnicode(false);

                entity.Property(e => e.Strasse)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MwstTable>(entity =>
            {
                entity.HasKey(e => e.PkmwstId);

                entity.ToTable("mwst_table");

                entity.Property(e => e.PkmwstId)
                    .HasColumnName("PKmwst_id")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MwstWert)
                    .HasColumnName("Mwst_wert")
                    .HasColumnType("numeric(10, 2)");
            });

            modelBuilder.Entity<SchrammOsaffiliateMapping>(entity =>
            {
                entity.ToTable("SchrammOSAffiliateMapping");

                entity.HasIndex(e => e.AffiliateAlt)
                    .HasName("NonClusteredIndex-20170713-171155");

                entity.HasIndex(e => e.AffiliateNeu)
                    .HasName("NonClusteredIndex-20170713-171209");

                entity.HasIndex(e => new { e.AffiliateAlt, e.AffiliateNeu, e.Kostenstelle, e.AffiliateName })
                    .HasName("NonClusteredIndex-20170713-171134");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AffiliateAlt).HasColumnName("affiliateALT");

                entity.Property(e => e.AffiliateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AffiliateNeu).HasColumnName("affiliateNEU");

                entity.Property(e => e.Dhlteilnahme)
                    .HasColumnName("DHLTeilnahme")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EmailFooter)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Kostenstelle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Schlusssatz1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Schlusssatz2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StdDruckdaten).IsUnicode(false);

                entity.Property(e => e.Widerruf).IsUnicode(false);

                entity.Property(e => e.WiderrufPdf)
                    .HasColumnName("WiderrufPDF")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Zollerklärung).IsUnicode(false);
            });

            modelBuilder.HasSequence<int>("CustomerId").StartsAt(1000);

            modelBuilder.HasSequence<int>("Einlesen_Kopfdaten_PKorder_id").StartsAt(505000000);
        }
    }
}
