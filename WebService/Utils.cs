using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Debug;
using System;
using System.Collections.Generic;

namespace Company.WebService
{
    public static class Utils
    {
#if DEBUG
		/// <summary>
		/// Logs the actually SQL generated by Entity Framework
		/// </summary>
        public static readonly LoggerFactory LoggerFactory
        = new LoggerFactory(new[]
        {
#pragma warning disable CS0618 // Type or member is obsolete
                new DebugLoggerProvider((category, level)
                    => category == DbLoggerCategory.Database.Command.Name && level == LogLevel.Information)
#pragma warning restore CS0618 // Type or member is obsolete
        });
#endif

		/// <summary>
		/// This converts a variety of string date formats stored in MAINDB to a DateTime object
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public static DateTime ConvertSchrammDateTime(string value)
        {
            if (string.IsNullOrEmpty(value))
                return DateTime.MinValue;

            string[] splitValue = value.Split('-');

            if (splitValue.Length != 3)
                splitValue = value.Split('.');

            if (splitValue.Length != 3)
                return DateTime.MinValue;

#pragma warning disable IDE0018 // Inline variable declaration
			int firstNumber;
            int secondNumber;
            int thirdNumber;
#pragma warning restore IDE0018 // Inline variable declaration

            if (!int.TryParse(splitValue[0], out firstNumber)
            || !int.TryParse(splitValue[1], out secondNumber)
            || !int.TryParse(splitValue[2], out thirdNumber))
                return DateTime.MinValue;

            if((firstNumber + secondNumber + thirdNumber) == 0)
                return DateTime.MinValue;

			try {
				if (firstNumber > thirdNumber)
					return new DateTime(firstNumber, secondNumber, thirdNumber);
				else
					return new DateTime(thirdNumber, secondNumber, firstNumber);
			}
			catch {
				return DateTime.MinValue;
			}
        }

    }
}
